
device kernel dmesg (mtdblocks):
--------------------------------
[    0.831554] m25p80 spi0.0: found mx25l25635e, expected m25p80
[    0.838101] m25p80 spi0.0: mx25l25635e (32768 Kbytes)
[    0.843392] 8 cmdlinepart partitions found on MTD device spi0.0
[    0.849501] Creating 8 MTD partitions on "spi0.0":
[    0.854465] 0x000000000000-0x000000040000 : "u-boot"
[    0.861483] 0x000000040000-0x000000050000 : "u-boot-env"
[    0.868963] 0x000000050000-0x000000e80000 : "rootfs"
[    0.875597] mtd: device 2 (rootfs) set to be root filesystem
[    0.881945] 1 squashfs-split partitions found on MTD device rootfs
[    0.888396] 0x000000390000-0x000000e80000 : "rootfs_data"
[    0.895782] 0x000000e80000-0x000000ff0000 : "kernel"
[    0.902891] 0x000000ff0000-0x000001000000 : "art"
[    0.909652] 0x000001000000-0x000001040000 : "reserve"
[    0.916831] 0x000001040000-0x000002000000 : "user"
[    0.923764] 0x000000050000-0x000000ff0000 : "firmware"

So basically, from this mtdblocks, we can derive the following:
0x000000000000-0x000000040000 : "u-boot"
0x000000040000-0x000000050000 : "u-boot-env"
0x000000050000-0x000000ff0000 : "firmware -> rootfs + kernel"
0x000000ff0000-0x000001000000 : "art"
Not sure what the rest is?

To be able to support my 32MB flash device, we need to calculate maximum flash size, and then add it to our reg property.
So, we know that the flash size is 32MB. -> 32 * 1024 * 1000 -> 32768000 bytes -> 0x1F40000.

We know that our reg property has a <offset, len> valueset, we need to calculate the length of the "firmware" / "rootfs".
We can do that by taking the 0x1F40000 (32768000) and subtract it from the initial 0x50000 offset (327680) -> len, 32768000 - 327680 = 33226752 -> 0x1EF0000

Thus, we can input this into our device tree property value ->
partition@50000 {
	compatible = "denx,uimage";
	label = "firmware";
	reg = <0x050000 0x1EF0000>;
};

Remember, this is for a 32MB device, your mileage may vary.

Some information on the device:
-------------------------------

root@OpenWrt:/# cat /proc/mtd 
dev:    size   erasesize  name
mtd0: 00040000 00010000 "u-boot"
mtd1: 00010000 00010000 "u-boot-env"
mtd2: 00e30000 00010000 "rootfs"
mtd3: 00af0000 00010000 "rootfs_data"
mtd4: 00170000 00010000 "kernel"
mtd5: 00010000 00010000 "art"
mtd6: 00040000 00010000 "reserve"
mtd7: 00fc0000 00010000 "user"
mtd8: 00fa0000 00010000 "firmware"

root@OpenWrt:/# cat /etc/os-release 
NAME="OpenWrt"
VERSION="18.06.4"
ID="openwrt"
ID_LIKE="lede openwrt"
PRETTY_NAME="OpenWrt 18.06.4"
VERSION_ID="18.06.4"
HOME_URL="http://openwrt.org/"
BUG_URL="http://bugs.openwrt.org/"
SUPPORT_URL="http://forum.lede-project.org/"
BUILD_ID="r7808-ef686b7292"
LEDE_BOARD="ar71xx/generic"
LEDE_ARCH="mips_24kc"
LEDE_TAINTS="no-all"
LEDE_DEVICE_MANUFACTURER="OpenWrt"
LEDE_DEVICE_MANUFACTURER_URL="http://openwrt.org/"
LEDE_DEVICE_PRODUCT="Generic"
LEDE_DEVICE_REVISION="v0"
LEDE_RELEASE="OpenWrt 18.06.4 r7808-ef686b7292"

Device_info:
------------
root@OpenWrt:/# cat /etc/device_info 
DEVICE_MANUFACTURER='OpenWrt'
DEVICE_MANUFACTURER_URL='http://openwrt.org/'
DEVICE_PRODUCT='Generic'
DEVICE_REVISION='v0'

gpio info:
----------
root@OpenWrt:/# ls /sys/class/gpio/
export       gpiochip0    gpiochip494  unexport
root@OpenWrt:/#

kernel GPIO info:
-----------------
root@OpenWrt:/# cat /sys/kernel/debug/gpio 
gpiochip0: GPIOs 0-31, parent: platform/ath79-gpio, ath79-gpio:
 gpio-0   (                    |m31:green:status    ) out lo    
 gpio-4   (                    |m31:green:wan       ) out hi    
 gpio-11  (                    |m31:green:lan4      ) out hi    
 gpio-12  (                    |m31:green:wlan-2g   ) out lo    
 gpio-13  (                    |m31:green:wlan5g    ) out hi    
 gpio-14  (                    |m31:green:lan3      ) out hi    
 gpio-15  (                    |m31:green:lan2      ) out hi    
 gpio-16  (                    |m31:green:lan1      ) out lo    
 gpio-17  (                    |wps button          ) in  hi    

gpiochip1: GPIOs 494-511, ath9k-phy0:
 gpio-495 (                    |ath9k-phy0          ) in  lo    


switchconfig list:
------------------
root@OpenWrt:/# swconfig list
Found: switch0 - eth0


swconfig switch0 infodump:
--------------------------
root@OpenWrt:/sys/devices/platform/leds-gpio/leds/m31:green:lan2# swconfig dev switch0 show
Global attributes:
        enable_vlan: 1
        mirror_monitor_port: 15
Port 0:
        enable_mirror_rx: 0
        enable_mirror_tx: 0
        pvid: 0
        link: port:0 link:up speed:1000baseT full-duplex txflow rxflow 
Port 1:
        enable_mirror_rx: 0
        enable_mirror_tx: 0
        pvid: 1
        link: port:1 link:up speed:100baseT full-duplex auto
Port 2:
        enable_mirror_rx: 0
        enable_mirror_tx: 0
        pvid: 1
        link: port:2 link:down
Port 3:  
        enable_mirror_rx: 0
        enable_mirror_tx: 0
        pvid: 1
        link: port:3 link:down
Port 4:
        enable_mirror_rx: 0
        enable_mirror_tx: 0
        pvid: 1
        link: port:4 link:down
VLAN 0:
        vid: 0
        ports: 0t 
VLAN 1:
        vid: 1
        ports: 0t 1 2 3 4

The embstar module has pcie controller and breakout, but not used in this case, but keep pcie enabled for our mainlining purposes?

-----------------------------------------
Some notes:
-----------------------------------------

gpios:
------
All seems to be active low.
gpio4  -> wan active-lo
gpio16 -> lan1 active-lo
gpio15 -> lan2 active-lo
gpio14 -> lan3 active-lo
gpio11 -> lan4 active-lo
gpio17 -> WPS button, active lo (button pressed -> lo, normal is hi)
gpio0  -> Unused pin.
gpio12 -> wlan2g (phy0tpt) indicator, active lo
gpio13 -> wlan5g/status LED (5g radio not used) -> used as status LED (heartbeat in DTB?)

some configurations to set in 01_leds:
--------------------------------------
wan led  -> eth1
lan1 led -> switch0 0x02
lan2 led -> switch0 0x04
lan3 led -> switch0 0x08
lan4 led -> switch0 0x10

/etc/board.d/01_leds config example:
------------------------------------
embstar,mp05)
  ucidef_set_led_wlan "wlan" "WLAN" "green:wlan" "phy0tpt"
	ucidef_set_led_netdev "wan" "WAN" "green:wan" "eth1"
	ucidef_set_led_switch "lan1" "LAN1" "green:lan1" "switch0" "0x02"
	ucidef_set_led_switch "lan2" "LAN2" "green:lan2" "switch0" "0x04"
	ucidef_set_led_switch "lan3" "LAN3" "green:lan3" "switch0" "0x08"
	ucidef_set_led_switch "lan4" "LAN4" "green:lan4" "switch0" "0x10"

/etc/board.d/02_network config example:
---------------------------------------
embstar,mp05)
		ucidef_set_interface_wan "eth1"
		ucidef_add_switch "switch0" \
			"0@eth0" "1:lan:1" "2:lan:2" "3:lan:3" "4:lan:4"
		;;

Next:
---------------
device-tree WIP -> Mostly in-memory on how it can be done.
---------------

32MB partition data is complete.
GPIOs outstanding, I would need a datasheet/pinout from Embstar on this, to properly map out all the pins that is present on the board.


------------
makefile WIP -> Simple enough, but IMAGE_SIZE=?? How would one determine the image size based on a flash chip?
------------
I think to calculate image size, one should look to take the whole 32MB flash size, and then subtract all the items we wont need to modify.
so, for our case, that means we have the ART partition, uboot and uboot-env partition data that we need to subtract from the base 32MB image size.

0x000000000000-0x000000040000 : "u-boot" -> 0x40000 bytes. (262144)
0x000000040000-0x000000050000 : "u-boot-env" -> 0x10000 bytes. (65536)
0x000000ff0000-0x000001000000 : "art" -> 0x10000 bytes. (65536)

If we calculate the 3x values together, we get 393216 bytes. 32MB flash (32 * 1024 * 1000) -> 32768000.
Therefore, 32768000 - 393216 -> 32374784 bytes usable. -> 32374 kb. 
To be safe, lets make the image size 32000kb, to have some blocks free for flash-wear, erase etc.

